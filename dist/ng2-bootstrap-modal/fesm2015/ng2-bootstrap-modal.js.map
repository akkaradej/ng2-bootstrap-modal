{"version":3,"file":"ng2-bootstrap-modal.js","sources":["ng://ng2-bootstrap-modal/lib/dialog-wrapper.component.ts","ng://ng2-bootstrap-modal/lib/dialog-holder.component.ts","ng://ng2-bootstrap-modal/lib/dialog.service.ts","ng://ng2-bootstrap-modal/lib/bootstrap-modal.module.ts","ng://ng2-bootstrap-modal/lib/dialog.component.ts","ng://ng2-bootstrap-modal/public-api.ts","ng://ng2-bootstrap-modal/ng2-bootstrap-modal.ts"],"sourcesContent":["import {\n  Component, ViewContainerRef, ViewChild, ComponentFactoryResolver, ReflectiveInjector, Type, Output, EventEmitter\n} from '@angular/core';\nimport { DialogComponent } from './dialog.component';\n\n@Component({\n  selector: 'dialog-wrapper',\n  template: `\n    <div #container class=\"modal fade\" style=\"display:block !important;\" role=\"dialog\">\n        <ng-template #element></ng-template>\n    </div>\n`\n})\nexport class DialogWrapperComponent {\n\n  @Output() dialogClose = new EventEmitter();\n\n  /**\n   * Target element to insert dialog content component\n   */\n  @ViewChild('element', { read: ViewContainerRef }) public element: ViewContainerRef;\n\n  /**\n   * Link container DOM element\n   */\n  @ViewChild('container') public container;\n\n  /**\n   * Dialog content componet\n   * @type {DialogComponent}\n   */\n  private content: DialogComponent<any, any>;\n\n  /**\n   * Constructor\n   * @param {ComponentFactoryResolver} resolver\n   * @param {DialogService} dialogService\n   */\n  constructor(private resolver: ComponentFactoryResolver) { }\n\n  /**\n   * Adds content dialog component to wrapper\n   * @param {Type<DialogComponent>} component\n   * @return {DialogComponent}\n   */\n  addComponent<T, T1>(component: Type<DialogComponent<T, T1>>) {\n    const factory = this.resolver.resolveComponentFactory(component);\n    const injector = ReflectiveInjector.fromResolvedProviders([], this.element.injector);\n    const componentRef = factory.create(injector);\n    this.element.insert(componentRef.hostView);\n    this.content = componentRef.instance as DialogComponent<T, T1>;\n    this.content.wrapper = this;\n    return this.content;\n  }\n\n  /**\n   * Registers event handler to close dialog by click on backdrop\n   */\n  closeByClickOutside() {\n    const containerEl = this.container.nativeElement;\n    containerEl.querySelector('.modal-content').addEventListener('click', (event) => {\n      event.stopPropagation();\n    });\n    containerEl.addEventListener('click', () => {\n      this.dialogClose.emit();\n    }, false);\n  }\n}\n\n\n","import {\n  Component, ViewChild, ViewContainerRef, ComponentFactoryResolver,\n  Type\n} from '@angular/core';\nimport { DialogComponent } from './dialog.component';\nimport { DialogWrapperComponent } from './dialog-wrapper.component';\nimport { Observable } from 'rxjs';\nimport { DialogOptions } from './dialog.service';\n\n@Component({\n  selector: 'dialog-holder',\n  template: '<ng-template #element></ng-template>',\n})\nexport class DialogHolderComponent {\n\n  /**\n   * Target element to insert dialogs\n   */\n  @ViewChild('element', { read: ViewContainerRef }) public element: ViewContainerRef;\n\n  /**\n   * Array of dialogs\n   * @type {Array<DialogComponent> }\n   */\n  dialogs: Array<DialogComponent<any, any>> = [];\n\n  /**\n   * Constructor\n   * @param {ComponentFactoryResolver} resolver\n   */\n  constructor(private resolver: ComponentFactoryResolver) { }\n\n  /**\n   * Adds dialog\n   * @param {Type<DialogComponent>} component\n   * @param {object?} data\n   * @param {DialogOptions?} options\n   * @return {Observable<*>}\n   */\n  addDialog<T, T1>(component: Type<DialogComponent<T, T1>>, data?: T, options?: DialogOptions): Observable<T1> {\n    options = options || {} as DialogOptions;\n    const factory = this.resolver.resolveComponentFactory(DialogWrapperComponent);\n    const componentRef = this.element.createComponent(factory, options.index);\n    const dialogWrapper: DialogWrapperComponent = componentRef.instance as DialogWrapperComponent;\n    let _component: DialogComponent<T, T1> = dialogWrapper.addComponent(component);\n    _component.wrapper.dialogClose.subscribe(() => {\n      this.removeDialog(_component);\n    });\n    if (typeof (options.index) !== 'undefined') {\n      this.dialogs.splice(options.index, 0, _component);\n    } else {\n      this.dialogs.push(_component);\n    }\n    setTimeout(() => {\n      dialogWrapper.container.nativeElement.classList.add('show');\n      dialogWrapper.container.nativeElement.classList.add('in');\n    });\n    if (options.autoCloseTimeout) {\n      setTimeout(() => {\n        this.removeDialog(_component);\n      }, options.autoCloseTimeout);\n    }\n    if (options.closeByClickingOutside) {\n      dialogWrapper.closeByClickOutside();\n    }\n    if (options.backdropColor) {\n      dialogWrapper.container.nativeElement.style.backgroundColor = options.backdropColor;\n    }\n    return _component.fillData(data);\n  }\n\n  /**\n   * Removes dialog\n   * @param {DialogComponent} component\n   */\n  removeDialog(component: DialogComponent<any, any>) {\n    const element = component.wrapper.container.nativeElement;\n\n    element.classList.remove('show');\n    element.classList.remove('in');\n    setTimeout(() => {\n      this._removeElement(component);\n    }, 300);\n  }\n\n  private _removeElement(component) {\n    const index = this.dialogs.indexOf(component);\n    if (index > -1) {\n      this.element.remove(index);\n      this.dialogs.splice(index, 1);\n    }\n  }\n\n  clear() {\n    this.element.clear();\n    this.dialogs = [];\n  }\n}\n","import {\n  Injectable, ComponentFactoryResolver, ApplicationRef, Injector, EmbeddedViewRef, Type, Optional\n} from '@angular/core';\nimport { DialogHolderComponent } from './dialog-holder.component';\nimport { DialogComponent } from './dialog.component';\nimport { Observable } from 'rxjs';\n\nexport interface DialogOptions {\n  index?: number;\n  autoCloseTimeout?: number;\n  closeByClickingOutside?: boolean;\n  backdropColor?: string;\n}\n\nexport class DialogServiceConfig {\n  container: HTMLElement = null;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DialogService {\n\n  /**\n   * Placeholder of modal dialogs\n   * @type {DialogHolderComponent}\n   */\n  private dialogHolderComponent: DialogHolderComponent;\n\n  /**\n   * HTML container for dialogs\n   * type {HTMLElement}\n   */\n  private container: HTMLElement;\n\n  /**\n   * @param {ComponentFactoryResolver} resolver\n   * @param {ApplicationRef} applicationRef\n   * @param {Injector} injector\n   * @param {DialogServiceConfig} config\n   */\n  constructor(\n    private resolver: ComponentFactoryResolver,\n    private applicationRef: ApplicationRef,\n    private injector: Injector,\n    @Optional() config: DialogServiceConfig\n  ) {\n    this.container = config && config.container;\n  }\n\n  /**\n   * Adds dialog\n   * @param {Type<DialogComponent<T, T1>>} component\n   * @param {T?} data\n   * @param {DialogOptions?} options\n   * @return {Observable<T1>}\n   */\n  addDialog<T, T1>(component: Type<DialogComponent<T, T1>>, data?: T, options?: DialogOptions): Observable<T1> {\n    if (!this.dialogHolderComponent) {\n      this.dialogHolderComponent = this.createDialogHolder();\n    }\n    return this.dialogHolderComponent.addDialog<T, T1>(component, data, options);\n  }\n\n  /**\n   * Hides and removes dialog from DOM\n   * @param {DialogComponent} component\n   */\n  removeDialog(component: DialogComponent<any, any>): void {\n    if (!this.dialogHolderComponent) {\n      return;\n    }\n    this.dialogHolderComponent.removeDialog(component);\n  }\n\n  /**\n   * Closes all dialogs\n   */\n  removeAll(): void {\n    this.dialogHolderComponent.clear();\n  }\n\n  /**\n   * Creates and add to DOM dialog holder component\n   * @return {DialogHolderComponent}\n   */\n  private createDialogHolder(): DialogHolderComponent {\n\n    const componentFactory = this.resolver.resolveComponentFactory(DialogHolderComponent);\n\n    const componentRef = componentFactory.create(this.injector);\n    const componentRootNode = (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n    if (!this.container) {\n      const componentRootViewContainer = this.applicationRef.components[0];\n      this.container = (componentRootViewContainer.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n    }\n    this.applicationRef.attachView(componentRef.hostView);\n\n    componentRef.onDestroy(() => {\n      this.applicationRef.detachView(componentRef.hostView);\n    });\n    this.container.appendChild(componentRootNode);\n\n    return componentRef.instance;\n  }\n}\n","import { NgModule, ModuleWithProviders, ComponentFactoryResolver, ApplicationRef, Injector } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DialogHolderComponent } from './dialog-holder.component';\nimport { DialogWrapperComponent } from './dialog-wrapper.component';\nimport { DialogService, DialogServiceConfig } from './dialog.service';\n/**\n * Dialog service factory. Creates dialog service with options\n * @param { ComponentFactoryResolver } resolver\n * @param { ApplicationRef } applicationRef\n * @param { Injector } injector\n * @param { DialogServiceConfig } options\n * @return { DialogService }\n */\nexport function dialogServiceFactory(\n    resolver: ComponentFactoryResolver,\n    applicationRef: ApplicationRef,\n    injector: Injector,\n    options: DialogServiceConfig\n) {\n    return new DialogService(resolver, applicationRef, injector, options);\n}\n\n@NgModule({\n    declarations: [\n        DialogHolderComponent,\n        DialogWrapperComponent\n    ],\n    providers: [\n        DialogService\n    ],\n    imports: [\n        CommonModule\n    ],\n    entryComponents: [\n        DialogHolderComponent,\n        DialogWrapperComponent\n    ]\n})\nexport class BootstrapModalModule {\n    static forRoot(config: DialogServiceConfig): ModuleWithProviders<BootstrapModalModule> {\n        return {\n            ngModule: BootstrapModalModule,\n            providers: [\n                { provide: DialogServiceConfig, useValue: config },\n                {\n                    provide: DialogService,\n                    useFactory: dialogServiceFactory,\n                    deps: [ComponentFactoryResolver, ApplicationRef, Injector, DialogServiceConfig]\n                }\n            ]\n        };\n    }\n}\n\n\n","import {\n  OnDestroy\n} from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\nimport { DialogWrapperComponent } from './dialog-wrapper.component';\nimport { DialogService } from './dialog.service';\n\n/**\n * Abstract dialog\n * @template T - dialog data;\n * @template T1 - dialog result\n */\nexport class DialogComponent<T, T1> implements OnDestroy {\n\n  /**\n   * Observer to return result from dialog\n   */\n  private observer: Observer<T1>;\n\n  /**\n   * Dialog result\n   * @type {T1}\n   */\n  protected result: T1;\n\n  /**\n   * Dialog wrapper (modal placeholder)\n   */\n  wrapper: DialogWrapperComponent;\n\n  /**\n   * Constructor\n   * @param {DialogService} dialogService - instance of DialogService\n   */\n  constructor(protected dialogService: DialogService) { }\n\n  /**\n   *\n   * @param {T} data\n   * @return {Observable<T1>}\n   */\n  fillData(data: T): Observable<T1> {\n    data = data || {} as T;\n    const keys = Object.keys(data);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      this[key] = data[key];\n    }\n    return Observable.create((observer) => {\n      this.observer = observer;\n      return () => {\n        this.close();\n      };\n    });\n  }\n\n  /**\n   * Closes dialog\n   */\n  close(): void {\n    this.dialogService.removeDialog(this);\n  }\n\n  /**\n   * OnDestroy handler\n   * Sends dialog result to observer\n   */\n  ngOnDestroy(): void {\n    if (this.observer) {\n      this.observer.next(this.result);\n    }\n  }\n}\n","/*\n * Public API Surface of ng2-bootstrap-modal\n */\n\nexport * from './lib/bootstrap-modal.module';\nexport * from './lib/dialog.component';\nexport * from './lib/dialog.service';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {DialogHolderComponent as ɵa} from './lib/dialog-holder.component';\nexport {DialogWrapperComponent as ɵb} from './lib/dialog-wrapper.component';"],"names":[],"mappings":"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"}